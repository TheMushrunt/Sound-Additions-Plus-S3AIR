// Dedicated to SEGA: Never forget to add jump sounds ever again. Please. :(

// ----------------------------------------
// GENERAL GAMEPLAY:
// Determine sounds to use for jumping.
// ----------------------------------------

function void SAP.determineJumpSound() // used for the non-Extra Slot characters, usually.
{
	if (A1 == 0xffffb000)
	{
#if EXTRA_CHARACTERS_ACTIVE
		if (global.xtrachar)
		{
			SAP.determineESJumpSound()
			return
		}
#endif
		playSound(SFX_JUMP)
	}
	else
	{
		playSound(SFX_JUMP)
	}
}

function void SAP.determineESJumpSound() // This is to allow extra character slots to use their own jump SFX if they choose to. (Only works for main characters being Extra Slots)
{
	playSound(SFX_JUMP)
}

// ----------------------------------------
// GENERAL GAMEPLAY:
// Jumping off a wall with Knuckles.
// ----------------------------------------

//# address-hook(0x016e60)
function void fn016e60()
{
	base.fn016e60()

	if (control.player1 & CONTROL_ABC)
	{
		if (origins_sounds)
		{
			SAP.determineJumpSound()
		}
	}
}

// ----------------------------------------
// ANGEL ISLAND ZONE:
// Swinging vines.
// ----------------------------------------

//# address-hook(0x0220c2) end(0x02219c)
function void fn0220c2()
{
	if (s8[A2] != 0)
	{
		D1.u8 = D0.u8 & CONTROL_ABC
		if (D1.u8 != 0)
		{
			if (origins_sounds)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn0220c2()
}

// ----------------------------------------
// HYDROCITY ZONE:
// Rotating pillars.
// ----------------------------------------

//# address-hook(0x032784) end(0x0328c2)
function void fn032784()
{
	base.fn032784()

	u8 bit = (1 << D6.u8)

	if (origins_sounds)
	{
		if ((objA1.render_flags & render_flag.VISIBLE) && u8[A1 + 0x05] < 0x04)
		{
			if ((objA0.flags2a & bit) != 0)
			{
				if ((D5.u8 & CONTROL_ABC) != 0)
				{
					SAP.determineJumpSound()
				}
			}
		}
	}
}

// ----------------------------------------
// MARBLE GARDEN ZONE:
// Yo-Yo pulley rope.
// ----------------------------------------

function void fn0349ba()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0) && (D0.u8 & CONTROL_ABC) != 0
		{
			SAP.determineJumpSound()
		}
	}

	base.fn0349ba()
}

// ----------------------------------------
// CARNIVAL NIGHT ZONE:
// Large Vertical Cylinder.
// ----------------------------------------

//# address-hook(0x033ade) end(0x033c14)
function void fn033ade()
{
	base.fn033ade()

	if (debug_mode.state == 0)
	{
		if ((D5.u16 & CONTROL_ABC) != 0)
		{
			if (origins_sounds)
			{
				SAP.determineJumpSound()
			}
		}
	}
}

// ----------------------------------------
// LAUNCH BASE ZONE:
// Ride Grapple.
// ----------------------------------------

//# address-hook(0x0266b0) end(0x026792)
function void fn0266b0()
{
	if (u8[A2] != 0)
	{
		if ((D0.u8 & CONTROL_ABC) != 0)
		{
			if (origins_sounds)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn0266b0()
}

// ----------------------------------------
// LAUNCH BASE ZONE:
// Grapple.
// ----------------------------------------

//# address-hook(0x0290f2) end(0x029214)
function void fn0290f2()
{
	if (u8[A2] != 0)
	{
		if (objA1.velocity.y == -0x380 && (D0.u8 & CONTROL_ABC) != 0)
		{
			if (origins_sounds)
			{
				SAP.determineJumpSound()
			}
		}
	}
	base.fn0290f2()
}

// ----------------------------------------
// LAUNCH BASE ZONE:
// Teacup Elevator.
// ----------------------------------------

//# address-hook(0x026eda) end(0x02702c)
function void fn026eda()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0)
		{
			if ((D0.u8 & CONTROL_ABC) != 0 && u8[0xfffffaa9] == 0)
			{
				SAP.determineJumpSound()
			}
		}
	}
	base.fn026eda()
}

// ----------------------------------------
// LAUNCH BASE ZONE:
// Egg Mobile.
// ----------------------------------------

//# address-hook(0x08d47c) end(0x08d4c6)
function void fn08d47c()
{
	base.fn08d47c()

	if (origins_sounds)
	{
		if (objA0.position.x.u16 >= 0x4440 && !Mods.isModActive("Origins Parity Galore"))
		{
			SAP.determineJumpSound()
		}
	}
}

// ----------------------------------------
// MUSHROOM HILL ZONE:
// Elevator.
// ----------------------------------------

//# address-hook(0x03e508) end(0x03e596)
function void fn03e508()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0)
		{
			D1.u16 = D0.u16 & CONTROL_ABC
			if (D1.u8 != 0)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn03e508()
}

// ----------------------------------------
// MUSHROOM HILL ZONE:
// Swing.
// ----------------------------------------

//# address-hook(0x02291a) end(0x022a22)
function void fn02291a()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0)
		{
			if ((D0.u8 & CONTROL_ABC) != 0)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn02291a()
}

// ----------------------------------------
// MUSHROOM HILL ZONE:
// Parachute.
// ----------------------------------------

//# address-hook(0x03f5c2) end(0x03f6a2)
function void fn03f5c2()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0)
		{
			if (u16[A0 + 0x34] == objA1.velocity.x && u16[A0 + 0x36] == objA1.velocity.y)
			{
				if ((D0.u8 & CONTROL_ABC) != 0)
				{
					SAP.determineJumpSound()
				}
			}
		}
	}

	base.fn03f5c2()
}

// ----------------------------------------
// FLYING BATTERY ZONE:
// Monkey Bars.
// ----------------------------------------

//# address-hook(0x03aa7e) end(0x03ac36)
function void fn03aa7e()
{
	if (origins_sounds)
	{
		if (u8[A2] != 0)
		{
			if ((D0.u8 & CONTROL_ABC) != 0)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn03aa7e()
}

// ----------------------------------------
// FLYING BATTERY ZONE:
// Hanging Monkey Bars.
// ----------------------------------------

//# address-hook(0x03a8b8) end(0x03aa58)
function void fn03a8b8()
{
	if ((objA1.render_flags & render_flag.VISIBLE) && debug_mode.state == 0 && u8[A1 + 0x05] < 0x04)
	{
		if ((D0.u8 & CONTROL_ABC) != 0 && u8[A2])
		{
			if (origins_sounds)
			{
				SAP.determineJumpSound()
			}
		}
	}
	base.fn03a8b8()
	// fix the initial movement within a jump, to prevent a softlock
	if (u8[A2])
	{
		D0.u16 &= 0x0f00		// Any direction held?
		if (D0.u16 != 0)
		{
			u8[A2 + 0x02] = 0x3c
		}
		else
		{
			objA1.velocity.x = 0
		}
		if (D0 & 0x0400)		// CONTROL_LEFT held
		{
			objA1.velocity.x = -0x200
		}
		if (D0 & 0x0800)		// CONTROL_RIGHT held
		{
			objA1.velocity.x = 0x200
		}
	}
}

// ----------------------------------------
// FLYING BATTERY ZONE:
// Vertical Propellers.
// ----------------------------------------

//# address-hook(0x03c068) end(0x03c090)
function void fn03c068()
{
	base.fn03c068()

	if (new_sounds)
	{
		SAP.determineJumpSound()
	}
}

// ----------------------------------------
// SANDOPOLIS ZONE:
// Light Switch.
// ----------------------------------------

//# address-hook(0x040f52) end(0x04108e)
function void fn040f52()
{
	base.fn040f52()
	if (objA1.velocity.y == -0x380 && (D0.u8 & CONTROL_ABC) != 0)
	{
		if (origins_sounds)
		{
			SAP.determineJumpSound()
		}
	}
}

// ----------------------------------------
// LAVA REEF ZONE:
// Turbine Ladders.
// ----------------------------------------

//# address-hook(0x044338) end(0x0443b2)
function void fn044338()
{
	if (new_sounds)
	{
		if (u8[A2] != 0)
		{
			if (D1.u16 & CONTROL_ABC)
			{
				SAP.determineJumpSound()
			}
		}
	}

	base.fn044338()
}

// ----------------------------------------
// SKY SANCTUARY ZONE:
// Knuckles jumps off the button.
// ----------------------------------------

//# address-hook(0x06584c) end(0x065870)
function void fn06584c()
{
	base.fn06584c()

	if (new_sounds)
	{
		if (objA0.countdown_value < 0)
		{
			playSound(SFX_JUMP)
		}
	}
}

// ----------------------------------------
// SKY SANCTUARY ZONE:
// Knuckles jumps to the other side.
// ----------------------------------------

//# address-hook(0x0658ba) end(0x0658ec)
function void fn0658ba()
{
	base.fn0658ba()

	if (new_sounds)
	{
		if (objA0.position.x.u16 >= 0x02a8)
		{
			playSound(SFX_JUMP)
		}
	}
}

// ----------------------------------------
// DEATH EGG ZONE:
// Hang Carrier.
// ----------------------------------------

//# address-hook(0x04703e) end(0x04717c)
function void fn04703e()
{
	base.fn04703e()
	if (objA1.velocity.y == -0x380 && (D0.u8 & CONTROL_ABC) != 0)
	{
		if (origins_sounds)
		{
			SAP.determineJumpSound()
		}
	}
}
